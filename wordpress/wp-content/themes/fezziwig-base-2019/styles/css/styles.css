/* Import breakpoint */
@import url("https://fonts.googleapis.com/css?family=Open+Sans|Alice|Lato");
html, * {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

img {
  display: block;
  padding: 0;
  margin: 0;
  max-width: 100%;
  height: auto;
}

/*--------------------------------------------------------------
# Typography
--------------------------------------------------------------*/
html {
  font-size: 1rem;
}

body,
button,
input,
select,
optgroup,
textarea,
p {
  font-size: 1rem;
  font-family: 'Open Sans', Helvetica, Arial, sans-serif;
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Alice', Helvetica, Arial, sans-serif;
  font-weight: bold;
  line-height: 1.2;
  padding: 0;
  margin: 0 0 .75em 0;
}

h1 {
  font-size: 2rem;
}

h2 {
  font-size: 1.66rem;
}

h3 {
  font-size: 1.33rem;
}

h4 {
  font-size: 1rem;
}

h5 {
  font-size: 0.9rem;
}

h6 {
  font-size: 0.7rem;
}

p {
  margin-bottom: 1em;
}

dfn, cite, em, i {
  font-style: italic;
}

blockquote {
  margin: 0 1.5em;
}

address {
  margin: 0 0 1.5em;
}

pre {
  background: #eee;
  font-family: "Courier 10 Pitch", Courier, monospace;
  font-size: 0.9rem;
  line-height: 1.6;
  margin-bottom: 1.6em;
  max-width: 100%;
  overflow: auto;
  padding: 1.6em;
}

code, kbd, tt, var {
  font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
  font-size: 0.9rem;
}

abbr, acronym {
  border-bottom: 1px dotted #666;
  cursor: help;
}

mark, ins {
  background: #fff9c0;
  text-decoration: none;
}

big {
  font-size: 2rem;
}

body {
  width: 100%;
}

.site-wrapper {
  max-width: 1200px;
  margin: 0 auto;
}

.site {
  padding: 20px;
  background-color: rgba(0, 0, 255, 0.075);
}

#nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

#networking {
  -webkit-box-flex: 1;
  -ms-flex: auto;
  flex: auto;
}

.nav {
  display: block;
  -webkit-box-flex: 1;
  -ms-flex: auto;
  flex: auto;
}

.nav a:link, .nav a:visited {
  padding: .25em .5em;
  display: inline-block;
  margin-left: .125em;
  background-color: rgba(0, 0, 0, 0.25);
}

.nav a:hover {
  background-color: rgba(0, 0, 0, 0.75);
  color: white;
}

figure {
  margin: 0;
}

.wp-block-image {
  margin: 0;
}

.wp-block-image figure {
  margin-bottom: 1em;
}

.wp-block-image figure.alignleft {
  float: none;
  margin-left: 0;
  margin-right: 0;
}

@media (min-width: 768px) {
  .wp-block-image figure.alignleft {
    float: left;
    margin-right: 2em;
  }
}

.wp-block-image figure.alignright {
  float: none;
  margin-left: 0;
  margin-right: 0;
}

@media (min-width: 768px) {
  .wp-block-image figure.alignright {
    float: right;
    margin-left: 2em;
  }
}

.wp-block-image figure figcaption {
  margin-bottom: 0;
}

.editor-block-list__layout .editor-block-list__block[data-align=right] > .editor-block-list__block-edit {
  float: right;
  margin-left: 2em;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
